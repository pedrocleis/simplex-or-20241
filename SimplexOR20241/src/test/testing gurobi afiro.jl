using JuMP, Gurobi
m = Model(Gurobi.Optimizer)


c = [0;	    -0.4;	0;	    0;	    0;		0;		0;	    0;		0;		0;      0;      0;      -0.32;	0;	    0;		0;	    -0.6;	0;	    0;		0;	    0;		0;		0;		0;		0;		0;		0;	    0;	    -0.48;	0;	    0;	    10;]
c_type = -1
A = [-1     1       1	    0		0		0		0	    0		0		0	    0		0		0	    0	    0		0		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;
-1.06   0		0		1	    0		0		0	    0		0		0	    0		0		0	    0	    0		0		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;							
0	    0		0		0	    -1		-1		-1	    -1		0		0	    0		0		1	    1	    0		0		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;
0		0	    0		0	    -1.06	-1.06   -0.96   -0.86	0		0	    0		0		0	    0	    1		0		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;
0		0	    0		0	    0		0		0	    0		0		0	    0		0		0	    0	    0		-1		1	    1	    1		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;
0		0	    0		0	    0		0		0	    0		0		0	    0		0		0	    0	    0		-0.43	0	    0	    0		1	    0		0		0		0		0		0		0	    0	    0		0	    0		0;
0		0	    0		0	    0		0		0	    0		0		0	    0		0		0	    0	    0		0		0	    0	    0		0	    -0.43	-0.43	-0.39	-0.37	0		0		0	    0	    0		0	    1		0;
0		0	    0		0	    0		0		0	    0		0		0	    0		0		0	    0	    0		0		0	    0	    0		0	    1		1		1		1		0		0		0	    0	    -1		1	    0		1;
1		0	    0		0	    0		0		0	    0		0		0	    0		0		0	    0	    0		0		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;				
0		0	    0		0	    1		0		0	    0		-1		0	    0		0		0	    0	    0		0		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;
0		0	    0		0	    0		1		0	    0		0		-1	    0		0		0	    0	    0		0		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;
0		0	    0		0	    0		0		1	    0		0		0	    -1		0		0	    0	    0		0		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;
0		0	    0		0	    0		0		0	    1		0		0	    0		-1		0	    0	    0		0		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0      	0;
0		-1	    0		1.4	    0		0		0	    0		0		0	    0		0		0	    0	    0		0		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;
0		0	    0		0	    0		0		0	    0		0		0	    0		0		0	    0	    0		1		0	    0	    0		0	    0		0		0		0		0		0		0	    0	    0		0	    0		0;
0		0	    0		0	    0		0		0	    0		0		0	    0		0		0	    0	    0		0		0	    0	    0		0	    1		0		0		0		-1		0		0		0	    0		0	    0		0;
0		0	    0		0	    0		0		0	    0		0		0	    0		0		0	    0	    0		0		0	    0	    0		0	    0		1		0		0		0	    -1		0		0	    0		0	    0		0;
0		0	    0		0	    0		0		0	    0		0		0	    0		0		0	    0	    0		0		0	    0	    0		0	    0		0		1		0		0		0		-1		0	    0	    0		0	    0;
0       0		0	    0		0	    0		0		0	    0		0		0	    0		0		0	    0	    0		0		0	    0	    0		0	    0		0		1		0		0		0		-1		0	    0	    0		0; 
0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       -1      0       0       0       0       0       0       0       0       0       0       0       1.4     0       0       0;
0       0       0       0       0       0       0       0       2.364   2.386   2.408   2.429   0       0       0       0       0       0       -1      0       0       0       0       0       2.191   2.191   2.249   2.279   0       0       0       0;
0       0       -1      0       0       0       0       0       0       0       0       0       0       0       0       0.109   0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0;
0       0       0       0       0       0       0       0       0       0       0       0       0       -1      0       0       0       0       0       0       0.109   0.108   0.108   0.107   0       0       0       0       0       0       0       0;
0.301   0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       -1      0       0       0       0       0       0       0       0       0       0       0       0       0       0;
0       0       0       0       0.301   0.313   0.313   0.326   0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       -1      0       0;
0       0       0       1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       1       0       0       0       0       0       0       0       0       0       0       0       0;
0       0       0       0       0       0       0       0       0       0       0       0       0       0       1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       1       0;]
A_type = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
b = [0, 0, 0, 0, 0, 0, 0, 44, 80, 80, 0, 0, 0, 0, 500, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 300]

index_x = 1:32
index_constraints = 1:27

@variable(m, x[index_x] >= 0)

@objective(m, Min, sum(c[i] * x[i] for i in index_x))

for j in index_constraints
    if A_type[j] == 1
        @constraint(m, sum(A[j, i] * x[i] for i in index_x) <= b[j])
    elseif A_type[j] == -1
        @constraint(m, sum(A[j, i] * x[i] for i in index_x) >= b[j])
    elseif A_type[j] == 0
        @constraint(m, sum(A[j, i] * x[i] for i in index_x) == b[j])
    end
end

JuMP._standard_form_matrix(m)

JuMP.optimize!(m)
println("Objective value: ", JuMP.objective_value(m))